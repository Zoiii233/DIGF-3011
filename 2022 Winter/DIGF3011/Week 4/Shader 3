
// Title: Color space experimentation (lecture examples)

#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_mouse;
uniform vec2 u_resolution;
uniform float u_time;


// map()
// remap values from one range to another
// just like in Processing or p5.js
// by Rick Companje


//min1 min of input
//max1 max of input
//min2 min of input
//max2 max of inpurt
float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

// calculateHue()
// select a color from a collection of 6 based on a percentage
// returns a RGB color

vec3 calculateHue(vec3 colors[6], float pct){

    pct = fract( pct);
    //12 steps 0.083 (1 divided by 12 (number of colors)), each +0.083 is one column
    //5 stepes 0.2

    vec3 result = vec3(0.0);

    if( pct < 0.2 ){

        result = colors[0];

    } else if( pct < 0.4){

        result = colors[1];

    } else if( pct < 0.6){

        result = colors[2];

    } else if( pct < 0.8){

        result = colors[3];

    } else if( pct < 1.){

        result = colors[4];
        
    } 

    return result;
}

// calculateHueLerp()
// select a color from a collection of 6 based on a percentage
// interpolate between colors
// returns a RGB color

vec3 calculateHueLerp(vec3 colors[6], float pct){

    pct = mod( pct, 1.0);
    float stepSize = 0.0833;
    
    vec3 result = colors[0];
    

    if( pct < 0.2 ){

        pct = map( pct, 0.0, 0.2, 0.0, 1.0); 
        result = mix( colors[5], colors[4], pct);//interpolating in a small area （0-0.2）

    } else if( pct < 0.4){

        pct = map( pct, 0.2, 0.4, 0.0, 1.0);
        result = mix( colors[4], colors[3], pct);

    } else if( pct < 0.6){

        pct = map( pct, 0.4, 0.6, 0.0, 1.0);
        result = mix( colors[3], colors[2], pct);

    } else if( pct < 0.8){

        pct = map( pct, 0.6, 0.8, 0.0, 1.0);
        result = mix( colors[2], colors[1], pct);

    } else if( pct < 1.){

        pct = map( pct, 0.8, 1., 0.0, 1.0);
        result = mix( colors[1], colors[0], pct);
        
    } 

    return result;
}

// rgb_normalize()
// by Jeremy Rotsztain

vec3 rgb_normalize( int r, int g, int b){
    
    return vec3(float(r)/255., float(g)/255., float(b)/255.);
}

// hsb2rgb()
// HSV to RGB conversion
// By IQ

vec3 hsb2rgb( in vec3 c )
{
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );

	return c.z * mix( vec3(1.0), rgb, c.y);
}

void main (void) {

    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    vec2 st0 = st;


    // colors selected manually in w3school html color picker
    vec3 colors[6];
    colors[0] = rgb_normalize(179, 77, 77); 
    colors[1] = rgb_normalize(172, 83, 83); 
    colors[2] = rgb_normalize(159, 96, 96); 
    colors[3] = rgb_normalize(147, 108, 108); 
    colors[4] = rgb_normalize(134, 121, 121);
    colors[5] = rgb_normalize(128, 128, 128);

    vec3 color = vec3(0);

    // divide the canvas into 3 sections
    // invert the order for legibility
    float row = 1.0 - st.y;
    row = floor( row * 3.0);
    
    // calculate the hue
    // based on time, fract to keep in [0,1] range
    float hue = fract(u_time * 0.1);

    if( row == 0.0){

        // ========================================
        // top row: show 12 hues
        // ========================================
        
        color = calculateHue(colors, st.x);

    } else if( row == 1.0 ){
        
        // ========================================
        // row #2: show 12 hues interpolated
        // ========================================

        color = calculateHueLerp(colors, st.x);

     } else if( row == 2.0 ){

        // ========================================
        // row 3: show hsb color space
        // ========================================

       color = calculateHue(colors, st.x);
    } 

    gl_FragColor = vec4(color,1.0);
}
