// Author: Zoey Lu
// Title: Shader 1

#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;


//draw circle function
//from book of shader https://thebookofshaders.com/glossary/?search=dot
float circle(vec2 _st, vec2 pos, float _radius){
    vec2 dist = _st-pos;
	return 1.-smoothstep(_radius-(_radius*0.01),
                         _radius+(_radius*0.01),
                         dot(dist,dist)*4.104);
}

void main() {
    
    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    st.x *= u_resolution.x/u_resolution.y;
    vec2 mouse = u_mouse/u_resolution;

    // calculate layers as circles
    //change the location over time
    float layer1 = circle( st, vec2(0.5+cos(u_time)/3.,0.5-sin(u_time)/2.), 0.148);
    //change the radius over time
    float layer2 = circle( st, vec2(0.330,0.460), 0.572 *(abs(sin(u_time*3.))*0.2)) ;
    //change the radius by mouse x position
    float layer3 = circle( st, vec2(0.890,0.030), mouse.x);
    //control thw position by mouse
    float layer4 = circle( st, mouse, 0.2);

    
    // is is our fragment color
    vec3 color = vec3(0.);
    
    // draw circle with changing color when layer is activated (1.0)
    color = mix( color, vec3(abs(sin(u_time/3.)), 0.0, 0.0), layer1);
    color = mix( color, vec3(1.0,abs(sin(u_time/5.)),0.), layer2);
    color = mix( color, vec3(.8,1.000,abs(sin(u_time/5.))), layer3);
    //transparent overlay
    color *= mix( color, vec3(1.5,1.000,abs(sin(u_time/5.))), layer4);
  

    gl_FragColor = vec4(color,1.0);
}
